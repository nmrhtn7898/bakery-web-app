plugins {
    id "org.asciidoctor.convert" version "1.5.9.2"
    id 'com.bmuschko.docker-spring-boot-application' version '6.6.0'
}

version = '0.0.1-SNAPSHOT'

ext {
    snippetsDir = file("${buildDir}/generated-snippets")
}

dependencies {
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.2.6.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    dependsOn(test)
    inputs.dir snippetsDir
}

bootJar {
    dependsOn(asciidoctor)
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task copyFile {
    doLast {
        copy {
            from 'src/main/resources/run.sh'
            into "${buildDir}/libs"
        }
    }
}

task createDockerFile(type: Dockerfile) {
    dependsOn(copyFile) // 해당 테스크를 수행하면 사전에 수행해야할 테스크 지정, copyFile하면 build task 전처리 하지만 build 한다고 copyFIle 하는 것은 아님
    destFile = file("${buildDir}/libs/Dockerfile")// 도커 파일 생성 경로
    from('openjdk:8-jdk-alpine')
    runCommand('apk update && apk upgrade && apk add netcat-openbsd && apk add curl')
    addFile("${project.name}-${project.version}.jar", 'app.jar')
    addFile("run.sh", "run.sh")
    runCommand("chmod +x run.sh")
    entryPoint("./run.sh")
}

task createDockerImage(type: DockerBuildImage) {
    dependsOn(createDockerFile) // createDockerFile task에 의존 해당 task 수행 후 수행
    dockerFile = file("${buildDir}/libs/Dockerfile") // 도커 파일 경로
    inputDir = file("${buildDir}/libs") // 도커 파일 -> 이미지 빌드 작업 경로 컨텍스트
    images.add("${project.name}:${project.version}") // 도커 이미지 이름
}

tasks.build.finalizedBy(copyFile)